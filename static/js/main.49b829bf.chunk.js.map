{"version":3,"sources":["firebase.js","header.js","Form.js","Wish.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","react_default","a","createElement","Form","action","htmlFor","className","onChange","this","props","whenChange","type","placeholder","maxLength","value","userValue","id","onClick","userClick","Component","Wish","singleWish","new","name","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","userInput","target","handleClick","preventDefault","checkUserInput","state","undefined","Swal","fire","text","database","ref","push","wishes","knownWishes","_this2","on","response","newKnownWishes","newState","data","val","key","wishData","wishIsNew","includes","aria-live","aria-atomic","aria-relevant","map","src_Wish","header","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.49b829bf.chunk.js","sourcesContent":["// firebase.js\nimport firebase from 'firebase';\n\n// Initialize Firebase\n// USE YOUR CONFIG OBJECT\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDXA3PMTljdXIQCr2cFGG7wmBv35iGqtfc\",\n  authDomain: \"darwin-lyons-project-five.firebaseapp.com\",\n  databaseURL: \"https://darwin-lyons-project-five.firebaseio.com\",\n  projectId: \"darwin-lyons-project-five\",\n  storageBucket: \"darwin-lyons-project-five.appspot.com\",\n  messagingSenderId: \"637715078446\",\n  appId: \"1:637715078446:web:b71edb2f854f7b0d\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React from 'react';\n\nconst Header = () => {\n  return (\n    <div>\n      <h1>Send a wish into the Interverse</h1>\n    </div>\n  )\n} \n\nexport default Header;\n","import React, {Component} from 'react';\n\nclass Form extends Component {\n render () {\n   return (\n     <form action=\"\">\n        <label htmlFor=\"wishLabel\"\n        className=\"visuallyHidden\">\n          Type your wish here\n        </label>\n        {/* create user input, and bind to value */}\n        <input onChange={this.props.whenChange} \n        type=\"text\" \n        placeholder=\"Type your wish here\" \n        maxLength=\"50\"\n        value={this.props.userValue} \n        id=\"wishLabel\"\n       />\n       {/* bind click event to button  */}\n       <button onClick={this.props.userClick}>Send your wish</button>\n     </form>\n   )\n }\n}\n\nexport default Form;","import React, { Component } from 'react';\n\nclass Wish extends Component {\n  render () {\n    return (\n      <div className={\n        \"animationTime\"+(\n          //if this is new, give class lastWish, if not new, give empty string\n          this.props.singleWish.new? \" lastWish\" : \"\"\n        )}>\n        <div className=\"balloon\">\n          <p>{this.props.singleWish.name}</p>\n        </div>\n      </div>\n\n    )\n  }\n}\n\nexport default Wish;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport Swal from 'sweetalert2';\nimport Header from './header.js';\nimport Form from './Form.js';\nimport Wish from './Wish.js';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    //provide state for my application, create empty array for wishes, empty string to reset input and a boolean for the balloon animation\n    this.state = {\n      wishes: [],\n      userInput: '',\n      knownWishes: false,\n    }\n  }\n  componentDidMount() {\n    //create variable that holds a reference to database\n    const dbRef = firebase.database().ref();\n    //firebase watch command, watch the value changing \n    dbRef.on('value', (response) => {\n      //variable for new state\n      const newState = [];\n      //variable for the state of wishes on page load (Brent helped me with this)\n      const knownWishes = this.state.knownWishes\n      //variable for wishes added after original state\n      let newKnownWishes;\n      //if knownWishes is false, which I've set it to on page load, then do below\n      if (knownWishes === false){\n        //if known wishes is false, make newKnownWishes an empty array\n        newKnownWishes = [];\n      } else {\n        //if knownWishes has items in it, include the new known wishes\n        newKnownWishes = knownWishes;\n      }\n      //variable that contains everything in the database\n      const data = response.val();\n      //looping through the firebase object and pushing new information to it, giving it the firebase key and a name\n      for (let key in data) {\n        //creating a variable for wishData that is the data and its key \n        let wishData = data[key];\n        //create a boolean value for new wishes\n        let wishIsNew = false;\n        //if known wishes is not false then do below\n        if (knownWishes !== false){\n          //if the wish that we're looking at isn't known we're going mark it as new\n          if (knownWishes.includes(key) === false) {\n            wishIsNew = true\n            //we're going to push new wishes to newKnownWishes\n            newKnownWishes.push(key)\n          }\n        } else{\n          //add all keys to newKnownWishes\n          newKnownWishes.push(key)\n        }\n        //push to new state they key, the wishData and the newWish\n        newState.push({\n          key: key,\n          name: wishData,\n          new: wishIsNew,\n        });\n      }\n      //update previous state with new state array\n      this.setState({\n        wishes: newState,\n        //set known wishes to newKnownWishes, which tracks all the wishes on the page so we can animate anything new\n        knownWishes: newKnownWishes,\n      })\n    })\n    //componentDidMount  \n  }\n  //see when user changes input\n  handleChange = (event) => {\n    this.setState({\n      userInput: event.target.value,\n    })\n  }\n\n  //see when user clicks button \n  handleClick = (event) => {\n    event.preventDefault();\n    //make a new variable that checkes userInput\n    const checkUserInput = this.state.userInput\n    //if userInput is empty didplay an error\n    if (checkUserInput === '' || checkUserInput === ' ' || checkUserInput === undefined) {\n      Swal.fire({\n        type: 'error',\n        text: 'Please enter a wish!',\n      })\n      //if userInput has something in it then\n    } else {\n      //save firbase data here\n      const dbRef = firebase.database().ref();\n      //push new input to state\n      dbRef.push(this.state.userInput);\n      //reset user input \n      this.setState({\n        userInput: '',\n      })\n    }\n  }\n  //what is being rendered to the page \n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <div className=\"wrapperSmall\">\n            <div className=\"wishWrapper\" aria-live=\"polite\" aria-atomic=\"true\" aria-relevant=\"additions\">\n              {/* map over the user inputted wishes and display on the page */}\n              {this.state.wishes.map((userInput) => {\n                return (\n                  // import wish componenet\n                  <Wish \n                  singleWish={userInput}\n                  key={userInput.key}\n                  />\n                  )\n              })}\n            </div>\n            \n            <header>\n              {/* import header componenet */}\n              <Header />\n              {/* import form component */}\n              <Form \n              whenChange={this.handleChange}\n              userValue={this.state.userInput}\n              userClick={this.handleClick}\n              />\n            </header>\n          </div>{/* wrapperSmall */}\n        </div>{/* wrapper */}\n\n      </div> // App\n    )\n  }\n  //component \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}